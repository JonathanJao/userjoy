<!DOCTYPE html>
<html>
  <head>
    <title>SaaS Customer Analytics + Messaging</title>
    <meta name="description" content="See what users are doing on your app in realtime, and communicate personally with them" />

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!-- Twitter Card data -->
    <meta name="twitter:card" content="userjoy">
    <meta name="twitter:site" content="@userjoyco">
    <meta name="twitter:title" content="UserJoy(userjoyco) on twitter">
    <meta name="twitter:description" content="See what users are doing on your app in realtime, and communicate personally with them">
    <meta name="twitter:creator" content="@author_handle">
    <!-- Twitter Summary card images must be at least 200x200px -->
    <meta name="twitter:image" content=" https://pbs.twimg.com/profile_images/458268631244095488/Fq7EKwmD.png">

    <!-- Open Graph data -->
    <meta property="og:title" content="SaaS Customer Analytics + Messaging" />
    <meta property="og:type" content="businesses" />
    <meta property="og:url" content=" https://userjoy.co/" />
    <meta property="og:image" content=" https://pbs.twimg.com/profile_images/458268631244095488/Fq7EKwmD.png" />
    <meta property="og:description" content="See what users are doing on your app in realtime, and communicate personally with them" />
    <meta property="og:site_name" content="UserJoy" />
    <meta property="fb:admins" content="1289973391" />

    <link rel="icon" href="/favicon.ico" type="image/x-icon">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/landing-page.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, filesin your `assets/linker/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/bower_components/jquery/dist/jquery.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/js/ajaxspin.min.js"></script>
    <script src="/js/jquery.validation.min.js"></script>
    <script src="/js/landing-page.js"></script>
    <script src="/js/signup.js"></script>
    <!--SCRIPTS END-->

    <!-- <script src="<%= sails.config.hosts.cdn + '/dodatado.js' %>"></script> -->
  </body>
</html>
